# Invalidation of freshness>Governed by client>For all caches>
## 5.1.1.1 Invalidation: Check invalidation with POST and without freshness lifetime definition
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'

## 5.1.1.2 Invalidation: Check invalidation with POST and with relative freshness lifetime of response max-age=10
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.3 Invalidation: Check invalidation with POST and with relative freshness lifetime of response s-maxage=10
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.4 Invalidation: Check invalidation with POST and with absolute freshness lifetime of response Expires in 10 seconds
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'

## 5.1.1.5 Invalidation: Check invalidation with POST and with relative as well as absolute freshness lifetime of response max-age=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -p 7 -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.6 Invalidation: Check invalidation with POST and with relative as well as absolute freshness lifetime of response s-maxage=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -p 7 -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.7 Invalidation: Check invalidation with POST and with relative as well as absolute freshness lifetime of response max-age=10, s-maxage=20 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -p 15 -e 'ch:false;st:201'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'

## 5.1.1.8 Invalidation: Check invalidation with PUT and without freshness lifetime of response
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'

## 5.1.1.9 Invalidation: Check invalidation with PUT and max-age=10
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.10 Invalidation: Check invalidation with PUT and with relative freshness lifetime of response s-maxage=10
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.11 Invalidation: Check invalidation with PUT and with absolute freshness lifetime of response Expires in 10 seconds
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'

## 5.1.1.12 Invalidation: Check invalidation with PUT and with relative as well as absolute freshness lifetime of response max-age=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -p 7 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.13 Invalidation: Check invalidation with PUT and with relative as well as absolute freshness lifetime of response s-maxage=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -p 7 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.14 Invalidation: Check invalidation with PUT and with relative as well as absolute freshness lifetime of response max-age=10, s-maxage=20 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -p 15 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'

## 5.1.1.15 Invalidation: Check invalidation with DELETE and without freshness lifetime of response
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'

## 5.1.1.16 Invalidation: Check invalidation with DELETE and with max-age=10
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.17 Invalidation: Check invalidation with DELETE and with relative freshness lifetime of response s-maxage=10
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.18 Invalidation: Check invalidation with DELETE and with absolute freshness lifetime of response Expires in 10 seconds
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'

## 5.1.1.19 Invalidation: Check invalidation with DELETE and with relative as well as absolute freshness lifetime of response max-age=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -p 7 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.20 Invalidation: Check invalidation with DELETE and with relative as well as absolute freshness lifetime of response s-maxage=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -p 7 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.21 Invalidation: Check invalidation with DELETE and with relative as well as absolute freshness lifetime of response max-age=10, s-maxage=20 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -p 15 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'

## 5.1.1.22 Invalidation: Check invalidation with PATCH and without freshness lifetime of response
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -e 'ch:false;st:200'

## 5.1.1.23 Invalidation: Check invalidation with PATCH and with max-age=10
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.24 Invalidation: Check invalidation with PATCH and with relative freshness lifetime of response s-maxage=10
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.25 Invalidation: Check invalidation with PATCH and with absolute freshness lifetime of response Expires in 10 seconds
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'exp:10' -e 'ch:false;st:200'

## 5.1.1.26 Invalidation: Check invalidation with PATCH and with relative as well as absolute freshness lifetime of response max-age=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -p 7 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.27 Invalidation: Check invalidation with PATCH and with relative as well as absolute freshness lifetime of response s-maxage=10 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -p 7 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;exp:5' -e 'ch:false;st:200'

## 5.1.1.28 Invalidation: Check invalidation with PATCH and with relative as well as absolute freshness lifetime of response max-age=10, s-maxage=20 and Expires in 5 seconds
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -p 15 -e 'ch:false;st:204'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10,s-maxage=20;exp:5' -e 'ch:false;st:200'

## 5.1.1.29 Invalidation: Check invalidation with POST and with relative freshness lifetime of response max-age=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:max-age=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.30 Invalidation: Check invalidation with PUT and with relative freshness lifetime of response max-age=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:max-age=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.31 Invalidation: Check invalidation with DELETE and with relative freshness lifetime of response max-age=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:max-age=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.32 Invalidation: Check invalidation with PATCH and with relative freshness lifetime of response max-age=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:max-age=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:max-age=10' -e 'ch:false;st:200'

## 5.1.1.33 Invalidation: Check invalidation with POST and with relative freshness lifetime of response s-maxage=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.34 Invalidation: Check invalidation with PUT and with relative freshness lifetime of response s-maxage=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.35 Invalidation: Check invalidation with DELETE and with relative freshness lifetime of response s-maxage=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.36 Invalidation: Check invalidation with PATCH and with relative freshness lifetime of response s-maxage=10 and status code 400
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'cc:s-maxage=10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'cc:s-maxage=10' -e 'ch:false;st:200'

## 5.1.1.37 Invalidation: Expires 10 seconds before and status code 400
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'
POST /rsc -c 'ac:application/json' -s 'exp:-10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'

## 5.1.1.38 Invalidation Expires 10 seconds before and status code 400
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'
PUT /rsc -c 'ac:application/json' -s 'exp:-10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'

## 5.1.1.39 Invalidation: Expires 10 seconds before and status code 400
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'
DELETE /rsc -c 'ac:application/json' -s 'exp:-10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'

## 5.1.1.40 Invalidation: Expires 10 seconds before and status code 400
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'
PATCH /rsc -c 'ac:application/json' -s 'exp:-10;st:400' -e 'ch:false;st:400'
GET /rsc -c 'ac:application/json' -s 'exp:-10' -e 'ch:false;st:200'




# Invalidation of freshness>Governed by client>For all caches>